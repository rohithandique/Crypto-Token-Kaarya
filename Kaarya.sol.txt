pragma solidity ^0.6.0;

import './IERC20.sol' as IERC20 ;

contract Kaarya is IERC20 {
    
    uint public constant _totalSupply = 1000000;
    
    string public constant symbol = "KRY";
    string public constant name = "Kaarya Token";
    uint8 public constant decimals = 3;
    
    
    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;
    
    
    constructor() public{
        balances[msg.sender] = _totalSupply;
    }
    
    
    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) external view returns (uint256) {
        return balances[_owner];
    }

    
    function transfer(address recipient, uint256 amount) external returns (bool) {
        require (
            balances[msg.sender] >= _value
            && _value > 0
        );
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        Transfer(msg.sender, _to, _value);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        require(
            allowed[_from][msg.sender] >= _value
            && balances[_from] >= value
            && _value > 0
        );
        balances[_from] -= _value;
        balances[_to] += _value;
        allowed[_from][msg.sender] -= _value;
        return true;
    }

    function allowance(address owner, address spender) external view returns (uint256) {
        return allowed[_owner][_spender];
    }

    
    function approve(address spender, uint256 amount) external returns (bool) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }


    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}